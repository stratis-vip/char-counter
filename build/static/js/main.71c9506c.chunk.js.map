{"version":3,"sources":["components/box/index.tsx","components/hobbies/index.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["Box","props","r","useState","text","setText","ready","setReady","title","limit","limitUp","id","className","cols","rows","value","onChange","e","t","target","length","readOnly","Hobbies","undefined","hobbies","setHobbies","newHobby","setNewHobby","useEffect","a","localStorage","getItem","JSON","parse","sort","setItem","stringify","nT","currentTarget","map","hobby","idx","key","onClick","includes","alert","n","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71c9506c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './style.css'\n\ninterface lProps {\n  title: string\n  ready: boolean\n  limit: number\n  limitUp?: number\n  id?: string\n}\n\nconst isReady = (r: boolean): string => {\n  return r ? 'green' : 'red'\n}\n\nconst Box: React.FC<lProps> = props => {\n  const [text, setText] = useState<string>(\"\")\n  const [ready, setReady] = useState<boolean>(props.ready)\n  \n  const { title, limit, limitUp,id } = props\n  \n  \n  return (\n    <div className=\"box\">\n      <h2>{title}</h2>\n      <textarea\n        id={id && \"box\"}\n        className={isReady(ready)}\n        cols={60}\n        rows={5}\n        value={text}\n        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n          const t = e.target.value\n          setText(t)\n          if (t.length >= limit) {\n            if (limitUp) {\n              if (t.length < limitUp) {\n                setReady(true)\n              } else {\n                setReady(false)\n              }\n            }else {\n              setReady(true)\n            }\n          } else {\n            setReady(false)\n          }\n        }}\n      />\n      <input value={text.length} readOnly />\n    </div>\n  )\n}\n\nexport default Box\n","import React, { useState, useEffect } from 'react'\nimport './style.css'\n\nconst isReady = (r: boolean): string => {\n  return r ? 'green' : 'red'\n}\n\nconst Hobbies = () => {\n  const [hobbies, setHobbies] = useState<string[] | undefined>(undefined)\n  const [newHobby, setNewHobby] = useState<string>('')\n  const [text, setText] = useState<string>('')\n  const [ready, setReady] = useState<boolean>(false)\n  const limit = 20\n  // const limitUp = 20\n\n  useEffect(() => {\n    if (!hobbies) {\n      const a = localStorage.getItem('hobbies')\n      if (!a) {\n        localStorage.setItem('hobbies', JSON.stringify([]))\n      } else {\n        return setHobbies(JSON.parse(a).sort())\n      }\n      setHobbies([])\n    }\n  }, [hobbies])\n\n  const createSelect = () => {\n    if (!hobbies) {\n      return null\n    } else {\n      if (hobbies.length === 0) {\n        return null\n      } else {\n        return hobbies.map((hobby, idx) => <option key={idx}>{hobby}</option>)\n      }\n    }\n  }\n\n  return (\n    <div>\n      <h2>Hobbies</h2>\n      <div className=\"hob\">\n        <div className=\"left\">\n          {hobbies && hobbies[0] && (\n            <select\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                // const box:HTMLTextAreaElement|null = document.querySelector('#box')\n\n                // if (box){\n                const add = text === '' ? '' : ', '\n                const nT = text + add + e.currentTarget.value\n                setText(nT)\n                if (nT.length >= limit) {\n                  setReady(true)\n                }\n                // }\n              }}\n            >\n              {createSelect()}\n            </select>\n          )}\n          <input\n            value={newHobby}\n            onChange={e => {\n              setNewHobby(e.target.value)\n            }}\n          />\n          <button\n            onClick={() => {\n              if (hobbies && newHobby.length > 0) {\n                if (hobbies.includes(newHobby)) {\n                  alert('exists')\n                } else {\n                  const n = [...hobbies, newHobby].sort()\n                  \n                  localStorage.setItem('hobbies', JSON.stringify(n))\n                  setHobbies(undefined)\n                  setNewHobby('')\n                }\n              }\n            }}\n          >\n            Πρόσθεση Χόμπι\n          </button>\n        </div>\n        <textarea\n          className={isReady(ready)}\n          cols={40}\n          rows={5}\n          value={text}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n            const t = e.target.value\n            setText(t)\n            if (t.length >= limit) {\n              setReady(true)\n            } else {\n              setReady(false)\n            }\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Hobbies\n","import React from 'react';\nimport './style.css';\nimport Box from '../box';\nimport Hobbies from '../hobbies';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Box title=\"about me\" ready={false} limit={220}/>\n        <Box title=\"about you\" ready={false} limit={220}/>\n        <Hobbies />\n        \n        <Box title=\"search\" ready={false} limit={20} limitUp={60}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}